<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>La progettazione dei database on Giovanni Tomasicchio</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/</link><description>Recent content in La progettazione dei database on Giovanni Tomasicchio</description><generator>Hugo -- gohugo.io</generator><language>it-IT</language><lastBuildDate>Fri, 05 Jan 2007 12:54:01 +0000</lastBuildDate><atom:link href="https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/index.xml" rel="self" type="application/rss+xml"/><item><title>Dal Modello Relazionale al DDL dell'RDBMS</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/dal-modello-relazionale-al-ddl-dellrdbms/</link><pubDate>Fri, 05 Jan 2007 12:57:44 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/dal-modello-relazionale-al-ddl-dellrdbms/</guid><description>Abbiamo preparato la descrizione del mini-mondo, abbiamo realizzato il relativo Modello ER, convertendolo poi in Modello Relazionale. Abbiamo scelto con cura le chiavi primarie da utilizzare, optando per la creazione di alcune chiavi surrogate per ottimizzare le prestazioni del sistema. Abbiamo verificato la normalizzazione delle relazioni e magari abbiamo deciso di denormalizzare qualche attributo &amp;ldquo;strategico&amp;rdquo;. Siamo quindi pronti per implementare la nostra base di dati nell&amp;rsquo;RDBMS scelto. Per farlo dobbiamo descriverlo utilizzando il DDL, ovvero il linguaggio di definizione dei dati compreso dall&amp;rsquo;RDMBS.</description></item><item><title>Normalizzazione e denormalizzazione del database</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/normalizzazione-e-denormalizzazione-del-database/</link><pubDate>Fri, 05 Jan 2007 12:57:26 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/normalizzazione-e-denormalizzazione-del-database/</guid><description>Ricordate l&amp;rsquo;esempio della rubrica presentato nella prima lezione? Avevamo constatato, provando ad inserire nella tabella anche gli indirizzi dei luoghi di lavoro, che il nuovo schema presentava diverse ripetizioni. Inoltre avevamo intravisto possibili problemi nell&amp;rsquo;aggiornamento dei dati, ad esempio modificando l&amp;rsquo;indirizzo di un posto di lavoro. Avevamo concluso dicendo che solo una corretta progettazione del database avrebbe evitato simili problemi. Effettivamente, ora che conosciamo il Modello ER, possiamo dire che la rubrica andava rappresentata con 2 entità distinte, una per le persona, l&amp;rsquo;altra per i posti di lavoro.</description></item><item><title>Chiave primaria surrogata</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/chiave-primaria-surrogata/</link><pubDate>Fri, 05 Jan 2007 12:57:12 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/chiave-primaria-surrogata/</guid><description>La scelta di una chiave primaria per una relazione è molto importante. Poiché il Modello Relazionale viene implementato direttamente all&amp;rsquo;interno del database, bisogna tenere presente che gli RDBMS indicizzano le chiavi primarie in modo da velocizzare notevolmente la ricerca di una specifica riga all&amp;rsquo;interno delle tabelle.
Esistono quindi dei casi in cui è opportuno inserire delle chiavi primarie &amp;ldquo;surrogate&amp;rdquo;, realizzate cioè con campi che non contengono un particolare attributo della tupla (ad esempio nome e cognome per una tabella &amp;ldquo;studenti&amp;rdquo;), ma che vengono creati ad-hoc per far fronte a due comuni scenari: la difficoltà di reperire un insieme di campi che garantisca l&amp;rsquo;univocità della tupla o la complessità di gestione per la macchina di chiavi complesse.</description></item><item><title>Conversione del Modello ER in Modello Relazionale</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/conversione-del-modello-er-in-modello-relazionale/</link><pubDate>Fri, 05 Jan 2007 12:56:55 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/conversione-del-modello-er-in-modello-relazionale/</guid><description>Il Modello Relazionale che rappresenta il mini-modo di interesse può essere ricavato direttamente dal Modello ER, attraverso una sequenza di operazioni di conversioni. Ecco i passi fondamentali da seguire.
1. Creare una relazione per ciascuna entità del Modello ER, utilizzando per i campi gli stessi attributi semplici dell&amp;rsquo;entità di provenienza. La chiave primaria della relazione sarà scelta tra le chiavi candidate dell&amp;rsquo;entità.
2. Inserire nelle relazioni gli attributi composti delle entità, considerando però solo gli attributi semplici componenti.</description></item><item><title>Progettazione logica: il Modello Relazionale</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/progettazione-logica-il-modello-relazionale/</link><pubDate>Fri, 05 Jan 2007 12:56:35 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/progettazione-logica-il-modello-relazionale/</guid><description>Con il Modello Relazionale dei dati ci avviciniamo molto all&amp;rsquo;organizzazione che avrà la nostra base di dati nell&amp;rsquo;RDBMS. Il Modello Relazionale rappresenta la struttura del database attraverso un insieme di relazioni, strutture del tutto simili a comuni tabelle.
Una relazione, identificata da un nome, è costituita da un insieme di tuple (le righe della tabella) ciascuna composta da diversi campi (le colonne) che conservano il valore degli attributi della relazione. Come nel Modello ER, anche per i campi di una relazione va specificato un dominio di appartenenza.</description></item><item><title>La chiave primaria</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/la-chiave-primaria/</link><pubDate>Fri, 05 Jan 2007 12:56:05 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/la-chiave-primaria/</guid><description>Nel primo esempio della lezione 6 si può notare la presenza di un altro tipo di attributo che ha un significato speciale all&amp;rsquo;interno delle entità: l&amp;rsquo;attributo chiave primaria. Nel diagramma ER questi attributi vengono indicati con una sottolineatura (nome per l&amp;rsquo;entità film e la coppia nome cognome per l&amp;rsquo;entità persona).
Gli attributi chiave primaria permettono di individuare univocamente ogni istanza dell&amp;rsquo;entità cui appartengono. Nel nostro caso ad esempio il nome &amp;ldquo;Via col vento&amp;rdquo; individua univocamente una istanza (un preciso film) dell&amp;rsquo;entità film.</description></item><item><title>Il dominio di un attributo</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/il-dominio-di-un-attributo/</link><pubDate>Fri, 05 Jan 2007 12:55:48 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/il-dominio-di-un-attributo/</guid><description>Ogni attributo di una entità o di una associazione possiede un dominio, ovvero ad esso è possibile assegnare solo un ben preciso insieme di valori. Il dominio di un attributo corrisponde ai tipi di dati elementari:
Stringhe di caratteri Valori numerici Valori temporali (date, ore, &amp;hellip;) Valori booleani (vero o falso) Enumerazioni (si definisce una lista di valori validi) Tornando al primo esempio della lezione precedente, gli attributi nome e cognome dell&amp;rsquo;entità persona hanno come dominio le stringhe di caratteri mentre data di nascita ovviamente apparterrà al dominio dei valori temporali.</description></item><item><title>Esempi di diagrammi ER</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/esempi-di-diagrammi-er/</link><pubDate>Fri, 05 Jan 2007 12:55:35 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/esempi-di-diagrammi-er/</guid><description>Riprendiamo l&amp;rsquo;esempio della lezione precedente: avevamo individuato le entità film e persona. L&amp;rsquo;associazione tra le due entità la chiamiamo ad esempio &amp;ldquo;cast&amp;rdquo;, e indica che una persona ha partecipato alla realizzazione di uno o più film ovvero che un film è stato realizzato da una o più persone. Il diagramma ER corrispondente è:
Nel diagramma ci sono alcuni elementi che devono ancora essere spiegati. Iniziamo a vedere cosa significano quella M e quella N vicino all&amp;rsquo;entità film e all&amp;rsquo;entità persona.</description></item><item><title>Progettazione concettuale: il Modello ER</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/progettazione-concettuale-il-modello-er/</link><pubDate>Fri, 05 Jan 2007 12:55:20 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/progettazione-concettuale-il-modello-er/</guid><description>Il Modello Entità-Associazione (dall&amp;rsquo;inglese Entity-Relationship, da cui la sigla ER), permette di dare uno sguardo visuale al progetto di una base di dati. Spesso nella letteratura delle basi di dati in lingua italiana si parla di Modello Entità-Relazione ma tale terminologia può portare a confondere la Relazione (concetto che presenteremo nelle prossime lezioni) con l&amp;rsquo;Associazione.
Attraverso il Modello ER è possibile vedere quali sono le entità della base di dati e quali sono le associazioni tra di esse.</description></item><item><title>Il mini-mondo</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/il-mini-mondo/</link><pubDate>Fri, 05 Jan 2007 12:55:12 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/il-mini-mondo/</guid><description>Il primo passo nella progettazione di una base di dati viene effettuato studiando approfonditamente il problema, tramite interviste a chi ha commissionato la base di dati ed agli operatori chi ne faranno utilizzo. Quando sono chiari i requisiti dell&amp;rsquo;applicazione e tutti i vincoli del problema, si scrive una breve ma essenziale descrizione del mini-mondo da rappresentare.
Un esempio dovrebbe chiarire un po' le idee. Si immagini di voler realizzare una semplice base di dati per un sito web che tratta di film.</description></item><item><title>La progettazione di una base di dati</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/la-progettazione-di-una-base-di-dati/</link><pubDate>Fri, 05 Jan 2007 12:54:42 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/la-progettazione-di-una-base-di-dati/</guid><description>Come si è visto nell&amp;rsquo;esempio della prima lezione, prima di passare alla definizione della base di dati è bene fermarsi a riflettere sul problema da risolvere e cercare di progettare la base di dati quanto meglio è possibile. Un errore di progettazione può ripercuotersi sull&amp;rsquo;intero sviluppo del progetto dando non poche noie. Una base di dati ben progettata risulta invece più efficiente e semplifica lo sviluppo delle applicazioni che ne faranno uso.</description></item><item><title>I DBMS</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/i-dbms/</link><pubDate>Fri, 05 Jan 2007 12:54:18 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/i-dbms/</guid><description>Seguendo la definizione enunciata nella precedente lezione, chiunque può costruirsi la propria base di dati, annotando con un certo ordine tutte le informazioni di cui ha bisogno su un file di testo o su un file formattato in un certo qual modo. Immaginate però di dover scrivere un software che implementi la lettura e la scrittura da una sì fatta base di dati, senz&amp;rsquo;altro dovrebbe essere scritto parecchio codice! L&amp;rsquo;utilizzo di un DBMS sicuramente ci semplificherebbe la vita.</description></item><item><title>Introduzione al concetto di database Relazionale</title><link>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/introduzione-al-concetto-di-database-relazionale/</link><pubDate>Fri, 05 Jan 2007 12:54:01 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/la-progettazione-dei-database/introduzione-al-concetto-di-database-relazionale/</guid><description>Al giorno d&amp;rsquo;oggi le basi di dati sono talmente diffuse che è difficile trascorrere una giornata senza aver, anche inavvertitamente, interagito con una di esse. Prelevare contanti da un bancomat, acquistare un libro, prenotare un volo, fare shopping on-line e persino fare la spesa, sono tutte operazioni che probabilmente coinvolgono un operatore o un programma informatico che interagiscono con una base di dati.
Proviamo a dare una definizione di base di dati:</description></item></channel></rss>