<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OOP on Giovanni Tomasicchio</title><link>https://giovannitomasicchio.github.io/tags/oop/</link><description>Recent content in OOP on Giovanni Tomasicchio</description><generator>Hugo -- gohugo.io</generator><language>it-IT</language><lastBuildDate>Fri, 15 Sep 2017 20:24:56 +0000</lastBuildDate><atom:link href="https://giovannitomasicchio.github.io/tags/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>Ereditarietà, solo per (sviluppatori) adulti</title><link>https://giovannitomasicchio.github.io/ereditarieta-solo-sviluppatori-adulti/</link><pubDate>Fri, 15 Sep 2017 20:24:56 +0000</pubDate><guid>https://giovannitomasicchio.github.io/ereditarieta-solo-sviluppatori-adulti/</guid><description>Visto l’interesse suscitato dal precedente post sulla relazione di ereditarietà, torno sull’argomento per mettere in risalto ulteriori vincoli da essa imposti.
Lo so, a volte anche le costrizioni possono risultare piacevoli… ed è proprio quello che accade con l’ereditarietà tra classi, certamente vincolante ma così immediata nel realizzare il riuso del codice. E allora, per allontanare questi pensieri impuri dai nostri progetti, recitiamo insieme la seguente preghiera tratta da uno dei testi sacri della programmazione ad oggetti:</description></item><item><title>Ereditarietà, usarla con cautela</title><link>https://giovannitomasicchio.github.io/ereditarieta-usarla-con-cautela/</link><pubDate>Fri, 08 Sep 2017 18:07:24 +0000</pubDate><guid>https://giovannitomasicchio.github.io/ereditarieta-usarla-con-cautela/</guid><description>In questo post voglio condividere alcune osservazioni sulle caratteristiche della relazione di ereditarietà nella programmazione object-oriented. Provo a farlo con un esempio.
Dobbiamo individuare il modello delle classi per una applicazione che gestisca l’archivio dei film di una videoteca. Per ciascun film dobbiamo memorizzare il regista e gli attori. Viene immediato individuare almeno tre classi: Film, Regista e Attore, collegate nel seguente modo:
Diagramma 1 Poiché dobbiamo realizzare delle funzionalità che operano sia sugli attori che sui registi, come ad esempio il motore di ricerca degli artisti, abbiamo bisogno del polimorfismo e quindi introduciamo una classe Artista.</description></item></channel></rss>