<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scalabilità on Giovanni Tomasicchio</title><link>https://www.giovannitomasicchio.it/tags/scalabilit%C3%A0/</link><description>Recent content in scalabilità on Giovanni Tomasicchio</description><generator>Hugo -- gohugo.io</generator><language>it-IT</language><lastBuildDate>Tue, 02 Jan 2018 15:50:26 +0000</lastBuildDate><atom:link href="https://www.giovannitomasicchio.it/tags/scalabilit%C3%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>CAP, ACID, BASE e Eventual Consistency</title><link>https://www.giovannitomasicchio.it/cap-acid-base-eventual-consistency/</link><pubDate>Tue, 02 Jan 2018 15:50:26 +0000</pubDate><guid>https://www.giovannitomasicchio.it/cap-acid-base-eventual-consistency/</guid><description>Per chi è abituato a lavorare con sistemi centralizzati, costituiti ad esempio da una applicazione monolitica dotata di un unico database relazionale, la realizzazione di un sistema distribuito si presenta ricca di insidie. Ne facevo cenno già in un precedente post in cui cercavo di far luce sui problemi che l’astrazione offerta dai moderni strumenti riesce a nascondere ma non a risolvere del tutto. Uno di questi problemi è legato al concetto di consistenza dei dati sparsi in un sistema distribuito.</description></item><item><title>Sorgente e runtime, le insidie dell’astrazione</title><link>https://www.giovannitomasicchio.it/sorgente-e-runtime-le-insidie-dellastrazione/</link><pubDate>Thu, 24 Aug 2017 13:35:17 +0000</pubDate><guid>https://www.giovannitomasicchio.it/sorgente-e-runtime-le-insidie-dellastrazione/</guid><description>Quando sviluppiamo tendiamo a trascurare gli aspetti legati al momento dell’esecuzione del codice, al così detto runtime. Questo capita maggiormente quando si ha a che fare con i linguaggi di alto livello, magari a macchina virtuale come il Java che “gira” all’interno di una JVM o il C# eseguito da una CLR, ma anche con i linguaggi di scripting come il PHP interpretato ed eseguito dallo Zend Engine. Questi ambienti di runtime infatti operano dietro le quinte, ad esempio gestendo in maniera trasparente l’allocazione dinamica della memoria.</description></item></channel></rss>