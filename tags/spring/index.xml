<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Giovanni Tomasicchio</title><link>https://giovannitomasicchio.github.io/tags/spring/</link><description>Recent content in Spring on Giovanni Tomasicchio</description><generator>Hugo -- gohugo.io</generator><language>it-IT</language><lastBuildDate>Sat, 16 Dec 2017 16:22:54 +0000</lastBuildDate><atom:link href="https://giovannitomasicchio.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Eventi di dominio in Spring framework</title><link>https://giovannitomasicchio.github.io/eventi-dominio-spring-framework/</link><pubDate>Sat, 16 Dec 2017 16:22:54 +0000</pubDate><guid>https://giovannitomasicchio.github.io/eventi-dominio-spring-framework/</guid><description>Qualche giorno fa un collega mi ha chiesto consigli su come disaccoppiare il codice che gestisce la logica di business dal codice che produce eventuali “reazioni” del sistema all’operazione eseguita. La sua necessità sorgeva dal fatto che l’applicazione su cui sta lavorando, realizzata con Spring framework, sarebbe stata utilizzata da diversi clienti, ciascuno dei quali avrebbe potenzialmente richiesto, per la medesima operazione principale, l’esecuzione di differenti operazioni secondarie. Una soluzione a questo problema è l’introduzione nel sistema degli eventi di dominio.</description></item></channel></rss>