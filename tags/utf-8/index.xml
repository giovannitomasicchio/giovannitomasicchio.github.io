<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UTF-8 on Giovanni Tomasicchio</title><link>https://giovannitomasicchio.github.io/tags/utf-8/</link><description>Recent content in UTF-8 on Giovanni Tomasicchio</description><generator>Hugo -- gohugo.io</generator><language>it-IT</language><lastBuildDate>Tue, 19 Oct 2010 20:34:51 +0000</lastBuildDate><atom:link href="https://giovannitomasicchio.github.io/tags/utf-8/index.xml" rel="self" type="application/rss+xml"/><item><title>Utilizzare il filtro antispam di Akismet con PHP</title><link>https://giovannitomasicchio.github.io/articoli/utilizzare-il-filtro-antispam-di-akismet-con-php/</link><pubDate>Tue, 19 Oct 2010 20:34:51 +0000</pubDate><guid>https://giovannitomasicchio.github.io/articoli/utilizzare-il-filtro-antispam-di-akismet-con-php/</guid><description>Akismet è un servizio di filtraggio dello spam offerto dalla Automattic, l&amp;rsquo;azienda maggiormente impegnata nello sviluppo di Wordpress. In questo articolo vedremo come invocare Akismet nei nostri script PHP per ricevere una valutazione sulla bontà dei commenti inviati dagli utenti attraverso un classico form HTML.
Il servizio di filtraggio di Akismet è gratuito per utilizzo personale, previa registrazione a questo indirizzo. Completata la registrazione si riceverà via mail un codice personale che, come vedremo negli esempi tra breve, servirà per avere accesso al servizio.</description></item><item><title>Zend Framework Tutorial - 3</title><link>https://giovannitomasicchio.github.io/articoli/zend-framework-tutorial-3/</link><pubDate>Sat, 14 Jul 2007 09:23:58 +0000</pubDate><guid>https://giovannitomasicchio.github.io/articoli/zend-framework-tutorial-3/</guid><description>Model Poiché tutte le funzionalità del sito che stiamo realizzando fanno accesso ai dati presenti nel database, prima di realizzare i Controller del nostro progetto analizziamo il funzionamento del Model, ovvero della classe responsabile di tutte le operazioni eseguite direttamente sulla base di dati. Per realizzare il Model adotteremo il classico approccio di una applicazione PHP/MySQL basato sull&amp;rsquo;esecuzione esplicita di query attraverso lo Zend_Db_Adapter.
Il Model per la gestione delle news sarà quindi una classe con un metodo per ciascuna funzionalità fondamentale sui dati della news: getAllNews per lettura di tutte le news (per la home-page), getNewsById per lettura di una singola news (impiegata nelle pagine di visualizzazione e modifica di una singola news), insertUpdateNews per l&amp;rsquo;inserimento e la modifica e deleteNews per la cancellazione.</description></item><item><title>Login con AJAX e PHP</title><link>https://giovannitomasicchio.github.io/articoli/login-con-ajax-e-php/</link><pubDate>Wed, 03 Jan 2007 16:28:23 +0000</pubDate><guid>https://giovannitomasicchio.github.io/articoli/login-con-ajax-e-php/</guid><description>Introduzione In un precedente articolo abbiamo visto una semplicissima implementazione della tecnologia AJAX con PHP, che faceva uso del metodo GET dell&amp;rsquo;HTTP per inviare delle informazioni dal browser al server in maniera asincrona.
Con questo articolo invece ci occupiamo di inviare con AJAX ad uno script PHP i dati inseriti dall&amp;rsquo;utente all&amp;rsquo;interno di un comune form HTML. Per farlo ci serviremo di un semplice esempio, realizzeremo infatti un banale sistema di login.</description></item></channel></rss>