<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduzione allo Zend Framework on Giovanni Tomasicchio</title><link>https://giovannitomasicchio.github.io/categories/introduzione-allo-zend-framework/</link><description>Recent content in Introduzione allo Zend Framework on Giovanni Tomasicchio</description><generator>Hugo -- gohugo.io</generator><language>it-IT</language><lastBuildDate>Tue, 28 Dec 2010 16:31:38 +0000</lastBuildDate><atom:link href="https://giovannitomasicchio.github.io/categories/introduzione-allo-zend-framework/index.xml" rel="self" type="application/rss+xml"/><item><title>Conclusioni</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/conclusioni/</link><pubDate>Tue, 28 Dec 2010 16:31:38 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/conclusioni/</guid><description>Si conclude così la nostra breve panoramica su come costruire una semplice, ma completamente funzionante, applicazione MVC usando Zend Framework. Spero che abbiate trovato questa guida interessante ed istruttiva. Se trovate qualsiasi cosa di sbagliato vi prego di scrivermi all&amp;rsquo;indirizzo rob@akrabat.com.
In questo tutorial si è dato uno sguardo alle basi dell&amp;rsquo;uso del framework; ci sono molti altri componenti da esplorare! Ho sorvolato su molte spiegazioni. Il mio sito web http://akrabat.</description></item><item><title>Cancellare un album</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/cancellare-un-album/</link><pubDate>Tue, 28 Dec 2010 16:30:26 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/cancellare-un-album/</guid><description>Per completare la nostra applicazione, dobbiamo aggiungere la cancellazione. Abbiamo un link &amp;ldquo;Delete&amp;rdquo; accanto ad ogni album nel nostro elenco e l&amp;rsquo;approccio più semplice sarebbe quello di fare una cancellazione diretta quando si fa click sul link. Ciò sarebbe sbagliato. Ricordando le specifiche dell&amp;rsquo;HTTP, non dovremmo effettuare un&amp;rsquo;operazione irreversible attraverso una richiesta GET, bensì attraverso una richiesta di tipo POST.
Quando un utente clicca su &amp;ldquo;Delete&amp;rdquo; dobbiamo mostrare un form di conferma e se poi si fa click su &amp;ldquo;yes&amp;rdquo; si procede con la cancellazione.</description></item><item><title>Modificare un album</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/modificare-un-album/</link><pubDate>Tue, 28 Dec 2010 16:28:40 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/modificare-un-album/</guid><description>La modifica di un album è quasi identica all&amp;rsquo;inserimento, il codice è molto simile:
zf-tutorial/application/controllers/IndexController.php
... function editAction() { $form = new Application_Form_Album(); $form-&amp;gt;submit-&amp;gt;setLabel(&amp;#39;Save&amp;#39;); $this-&amp;gt;view-&amp;gt;form = $form; if ($this-&amp;gt;getRequest()-&amp;gt;isPost()) { $formData = $this-&amp;gt;getRequest()-&amp;gt;getPost(); if ($form-&amp;gt;isValid($formData)) { $id = (int)$form-&amp;gt;getValue(&amp;#39;id&amp;#39;); $artist = $form-&amp;gt;getValue(&amp;#39;artist&amp;#39;); $title = $form-&amp;gt;getValue(&amp;#39;title&amp;#39;); $albums = new Application_Model_DbTable_Albums(); $albums-&amp;gt;updateAlbum($id, $artist, $title); $this-&amp;gt;_helper-&amp;gt;redirector(&amp;#39;index&amp;#39;); } else { $form-&amp;gt;populate($formData); } } else { $id = $this-&amp;gt;_getParam(&amp;#39;id&amp;#39;, 0); if ($id &amp;gt; 0) { $albums = new Application_Model_DbTable_Albums(); $form-&amp;gt;populate($albums-&amp;gt;getAlbum($id)); } } } .</description></item><item><title>Inserire un nuovo album</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/inserire-un-nuovo-album/</link><pubDate>Tue, 28 Dec 2010 16:27:27 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/inserire-un-nuovo-album/</guid><description>Creiamo adesso la funzione per aggingere un nuovo album. Ci sono due cose da fare:
visualizzare un form all&amp;rsquo;utente affinché possa inserire i dati processare l&amp;rsquo;invio del form e salvare i dati nel database Usiamo Zend_Form per fare il tutto. Il componente Zend_Form permette di creare un form e validare i dati inseriti. Creiamo una nuova classe Form_Album che estende Zend_Form per definire il nostro form. Come una risorsa dell&amp;rsquo;applicazione, la classe viene salvata nel file Album.</description></item><item><title>Elenco degli album</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/elenco-degli-album/</link><pubDate>Tue, 28 Dec 2010 16:25:28 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/elenco-degli-album/</guid><description>Ora che si è impostata la configurazione, le informazioni per il database e lo scheletro delle viste, possiamo entrare nel cuore dell&amp;rsquo;applicazione e visualizzare gli album. Ciò avviene nella classe IndexController ed inizieremo con il visualizzare gli album in una tabella con il metodo indexAction():
zf-tutorial/application/controllers/IndexController.php
... function indexAction() { $albums = new Application_Model_DbTable_Albums(); $this-&amp;gt;view-&amp;gt;albums = $albums-&amp;gt;fetchAll(); } ... Istanziamo il nostro model basato sul pattern &amp;ldquo;table data gateway&amp;rdquo;. Il metodo fetchAll() restituisce un oggetto Zend_Db_Table_Rowset che ci permetterà di ciclare sulle righe ottenute all&amp;rsquo;interno dello script view dell&amp;rsquo;action.</description></item><item><title>Utilizzare un foglio di stile</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/utilizzare-un-foglio-di-stile/</link><pubDate>Tue, 28 Dec 2010 16:24:10 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/utilizzare-un-foglio-di-stile/</guid><description>Anche se questo è solo un tutorial, avremo bisogno di un file CSS per rendere la nostra applicazione un pochino più presentabile! Ciò ci crea un piccolo problema dato che non sappiamo come referenziare il file CSS poiché gli URL delle diverse pagine non puntano direttamente alla directory di root. Fortunatamente abbiamo a disposizione un view helper di nome baseUrl(). Questo helper raccoglie le informazioni di cui necessita dall&amp;rsquo;oggetto request e ci fornisce la parte di URL che non conosciamo.</description></item><item><title>Layout</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/layout/</link><pubDate>Tue, 28 Dec 2010 16:22:22 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/layout/</guid><description>E' facile capire che ci sarà molto codice HTML comune nelle nostre view, almeno per le sezioni header e footer e magari per una o due barre laterali. Questo è un problema molto comune ed il componente Zend_Layout è progettato per risolverlo. Zend_Layout ci consente di spostare tutti gli elementi comuni come header, footer e altri in uno script view di layout che a sua volta includerà il codice specifico per l&amp;rsquo;azione che verrà eseguita.</description></item><item><title>View</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/view/</link><pubDate>Tue, 28 Dec 2010 16:20:41 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/view/</guid><description>Il componente view di Zend Framework si chiama, senza troppa fantasia, Zend_View. Questo componente ci permetterà di separare il codice che visualizza la pagina dal codice dei metodi action.
L&amp;rsquo;uso base di Zend_View è:
$view = new Zend_View(); $view-&amp;gt;setScriptPath(&amp;#39;/path/to/scripts&amp;#39;); echo $view-&amp;gt;render(&amp;#39;script.php&amp;#39;); E' molto facile constatare che, se mettessimo questo codice direttamente in ogni nostra action, dovremmo ripetere questo noioso codice architetturale privo di qualsiasi interesse per la action. Inizializzaremo invece la view altrove e poi avremo accesso al nostro oggetto view, già inizializzato, da ogni nostra action.</description></item><item><title>Model</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/model/</link><pubDate>Tue, 28 Dec 2010 16:18:53 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/model/</guid><description>Zend Framework non fornisce una classe Zend_Model, dato che il model è la nostra logica di business ed è lasciata a noi la decisione di come farla funzionare. Ci sono molti componenti che possimamo usare, dipende dalle necessità. Un approccio consiste nell&amp;rsquo;avere una classe model per ciascuna entità della nostra applicazione e poi usere degli oggetti &amp;ldquo;mapper&amp;rdquo; per caricare e salvare le varie entità nel database. Questo approccio è documentato nella guida QuickStart a Zend Framework: http://framework.</description></item><item><title>Preparazione del database</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/preparazione-del-database/</link><pubDate>Tue, 28 Dec 2010 16:17:30 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/preparazione-del-database/</guid><description>Ora che abbiamo lo scheletro dell&amp;rsquo;applicazione con le action del controller e i file view pronti, è il momento di dare uno sguardo alla sezione model dell&amp;rsquo;applicazione. Ricordiamo che i model sono la parte che si occupa delle funzionalità centrali dell&amp;rsquo;applicazione (le così dette &amp;ldquo;business rules&amp;rdquo;) e, nel nostro caso, interagiscono con il database. Useremo la classe Zend_Db_Table di Zend Framework per trovare, inserire, aggiornare e cancellare righe dalla tabella del database.</description></item><item><title>Controller e Action</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/controller-action/</link><pubDate>Tue, 28 Dec 2010 16:15:05 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/controller-action/</guid><description>Prima di procedere, è importante capire come lo Zend Framework si aspetta che siano organizzate le pagine. Ogni pagina dell&amp;rsquo;applicazione è detta &amp;ldquo;action&amp;rdquo; e più action vengono raggruppate all&amp;rsquo;interno di un controller. Per un URL del formato http://localhost/public/zf-tutorial/news/view, il controller è News e l&amp;rsquo;action è view. Ciò permette il raggruppamento delle action fra loro correlate. Per esempio, un controller News può avere delle action differenti per la lista, l&amp;rsquo;archivio e la visualizzazione delle news.</description></item><item><title>Configurazione e bootstrap</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/configurazione-bootstrap/</link><pubDate>Tue, 28 Dec 2010 16:12:34 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/configurazione-bootstrap/</guid><description>Il controller di Zend Framework usa il design pattern &amp;ldquo;Front Controller&amp;rdquo; pertanto instrada tutte le richieste attraverso un singolo file index.php. Ciò garantisce che l&amp;rsquo;ambiente sia impostato correttamente affinchè funzioni l&amp;rsquo;applicazione (fase di bootstrap). Per ottenere questo risultato usiamo un file .htaccess presente nella cartella zf-tutorial/pulic, generato precedentemente da Zend_Tool, che redireziona tutte le richieste al file public/index.php, anch&amp;rsquo;esso creato da Zend_Tool.
Il file index.php è il punto di inizio dell&amp;rsquo;applicazione ed è usato per creare una istanza di Zend_Application che inizializza ed avvia l&amp;rsquo;applicazione.</description></item><item><title>Creare la struttura del progetto</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/creare-la-struttura-del-progetto/</link><pubDate>Tue, 28 Dec 2010 16:10:20 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/creare-la-struttura-del-progetto/</guid><description>Partiamo con la costruzione della nostra applicazione. Dove possibile, cercheremo di utilizzare lo strumento zf (Zend_Tool n.d.t.) da riga di comando, che permetterà di risparimare tempo e fatica. La prima cosa da fare è creare lo scheletro dei file e delle cartelle del progetto.
Apriamo un terminale o il promt dei comandi e spostiamoci nella directory di root del nostro server web usando il comando cd. Assicuriamoci di avere i permessi per creare i file in questa directory e che il server web abbia i permessi di lettura.</description></item><item><title>L'applicazione di esempio</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/applicazione-di-esempio/</link><pubDate>Tue, 28 Dec 2010 16:08:18 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/applicazione-di-esempio/</guid><description>Ora che tutti i pezzi sono a posto, possiamo procedere con la costruzione dell&amp;rsquo;applicativo con Zend Framework. Prima, però, diamo uno sguardo all&amp;rsquo;applicazione che stiamo per realizzare.
Stiamo per costruire un sistema molto semplice che permetta di catalogare una collezione di CD. La pagina principale presenterà la nostra collezione e permetterà di aggiungere, modificare e cancellare CD.
Così come avviene in tutti i progetti software, è utile elaborare un piano di lavoro.</description></item><item><title>Zend_Tool</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/zend_tool/</link><pubDate>Tue, 28 Dec 2010 15:57:20 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/zend_tool/</guid><description>Zend Framework è distribuito con un nuovo strumento da usare da riga di comando. Incominceremo impostando questo.
Zend_Tool per Windows Creiamo una nuova directory in &amp;ldquo;Programmi&amp;rdquo; chiamata ZendFrameworkCli Facciamo doppio click sull&amp;rsquo;archivio scaricato, ZendFramework-1.10.6-minimal.zip. Copiamo le cartelle bin e library presente nell&amp;rsquo;archivio nella cartella C:\Programmi\ZendFrameworkCli. Questa cartella ora dovrebbe avere due sottocartelle: bin e library. Aggiungiamo la directory bin al nostro path: Andiamo nella sezione &amp;ldquo;Sistema&amp;rdquo; del Pannello di Controllo.</description></item><item><title>Introduzione</title><link>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/introduzione/</link><pubDate>Tue, 28 Dec 2010 15:37:01 +0000</pubDate><guid>https://giovannitomasicchio.github.io/corsi/corso-zend-framework/introduzione/</guid><description>Questo corso è tratto dal tutorial Getting Started with Zend Framework di Rob Allen, versione 1.7.5. La traduzione in italiano è a cura di Mario Santagiuliana.
E' possibile scaricare tutti i sorgenti dell&amp;rsquo;applicazione di esempio a questo indirizzo.
L&amp;rsquo;obbiettivo di questa guida è fornire un&amp;rsquo;introduzione all&amp;rsquo;uso dello Zend Framework attraverso la creazione di una semplice applicazione per la gestione di un database adottando il paradigma Model-View-Controller (MVC).
Attenzione: questa guida è stata verificata con la version 1.</description></item></channel></rss>